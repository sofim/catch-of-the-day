--	 hpsof | 09.02.2016 15:06:40
--	gekauft kurs react for beginners from wesbos.com fuer 59 usd
--	-------------------------------------------------------------------------
--	videos : http://reactforbeginners.com/learn/k86gph9n/hanspeter-schlapbach
--	-------------------------------------------------------------------------
--	starter-files for download (gemacht) : https://github.com/wesbos/React-For-Beginners-Starter-Files
--  (siehe G:\sofim_git_repos\react_lernen\React-For-Beginners-Starter-Files-master)
--
--  ordner catch-of-the-day machen. dort inhalt von erstem ordner der starter-files hineinkopieren (jeder ordner ist zusaetzlich inkrementell)
--
-- 	voraussetzungen
-- 	---------------
--	1. npm muss installiert sein                                 - OK
--	2. react dev. tools for chrome (addon) installieren          - OK
--  3. fuer atom-editor : apm install react  (atom react plugin) - OK
--		 https://orktes.github.io/atom-react/
--  4. gulp : https://github.com/gulpjs/gulp/blob/master/docs/getting-started.md
--		 Grunt and Gulp do exactly the same thing. (build-tool)
--		 install with     : npm install --global gulp-cli          - OK
--     dann in projverz : npm install --save-dev gulp            - OK
--	5. upgrade node - via download node-v4.2.6-x64.msi           - OK
--		 npm cache clean
--		 npm install
--
-- 	6. mit gulp kann app gestartet werden, browser oeffnet automatisch (localhost:3000)
--     anpassungen erfolgen reactive !
--
********************************************************************************
node und npm aktualisieren
--------------------------
node via download msi
npm install npm -g
G:\sofim_git_repos\react_lernen\catch-of-the-day>node -v && npm -v
v4.3.1
3.7.5
npm update -g
npm list
...
npm ERR! extraneous: graceful-fs@4.1.3 G:\sofim_git_repos\react_lernen\catch-of-the-day\node_modules\graceful-fs
npm ERR! extraneous: lodash@4.5.1 G:\sofim_git_repos\react_lernen\catch-of-the-day\node_modules\lodash
--
npm prune
	Remove extraneous packages
--
G:\sofim_git_repos\react_lernen\catch-of-the-day>npm prune
npm WARN package.json catch-of-the-day@1.0.0 No repository field.
unbuild graceful-fs@4.1.3
unbuild lodash@4.5.1
*******************************************************************************

-- °°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°
--		>>>>>> store mit daten in firebase : magnificent-fierce-lives <<<<<<<<<
--
--		folgende warnung erscheint immer. sobald das history-zeugs implementiert ist
--		[in den videos nicht genau gleich gemacht wie im code...]
--		Warning: [react-router] It appears you have provided a deprecated history
--			object to `<Router/>`, please use a history provided by React Router with
--			`import { browserHistory } from 'react-router'` or `import { hashHistory }
--			from 'react-router'`. If you are using a custom history please create it
--			with `useRouterHistory`, see http://tiny.cc/router-usinghistory for details.
--		Warning: [react-router] `props.history` and `context.history` are deprecated.
--			Please use `context.router`. http://tiny.cc/router-contextchanges
--		Warning: [history] pushState is deprecated; use push instead
--
-- °°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°
-- 1 of 29 : DEVELOPMENT ENVIRONMENT SETUP WITH GULP + BROWSERIFY				12:38
		installation and setup (siehe oben pkt 1 bis 6). als editor : atom
--
-- °°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°
-- 2 of 29 : Introduction to React Components                           06:36
		everything in react is a component = reusable piece of the app
		app selber ist auch component. components get props and have behavior
		° header | °fish (many) | °order | °inventory |
		example: facebook (they made react for their own reason)
--
-- °°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°
-- 3 of 29 : WRITING YOUR FIRST COMPONENT                               09:03
		inst von console : npm install react --save-dev
		fuellt alle dependencies in package.json fuer react (habs nid ausgefuehrt, da schon drin)
		npm ist auch package-mgr fuer javascript clnt-seitig heutzutage.
		statt z.b. jquery via google-cdn einzubinden via :  npm install jquery --save-dev
		--
		-- muster-code :
		--
		var React = require('react');
		var ReactDom = require('react-dom');
		/*
		  def komponente StorePicker : <StorePicker/>
		*/
		var StorePicker = React.createClass({
		  render : function() {
		    return (   //JSX-syntax
		      <p>hallo velo</p>
		    );
		  }
		});
		ReactDom.render(<StorePicker/>, document.querySelector('#main'));
--
-- °°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°
-- 4 of 29 : WRITING HTML WITH JSX																		  08:34
		return html created via react (js):
		render : function() {
			return React.createElement('p',{className:'test'},'content ');
		}
		-- to show : JSX-syntax is better
		-- achtung : jsx return-wert muss in einem einzelnen tag gewrapped werden, sonst gibt es error
				return (   //JSX-syntax : gibt fehler, da kein wrapper-tag
					<p>hallo </p>
					<p>velo</p>
				);
		-- hingegen so gehts:
				return (
					<div>
						<h1>sunny day today</h1>
						<h4>no - it is raining now</h4>
					</div>
				);
			-- auch bei selbstschliessenden tags beachten: <br> z.b. gibt fehler. muss <br /> sein!
			-- analog bei input img ...
			--
			-- zudem: statt class fuer angabe css-class muss className= angegeben werden! (class ist bereits reserviert in JS)
			--
			-- anzeige von variablen in JSX, sowie kommentar
			--	...
					var userName = "housi-pesche" ;
					return ( //--here starts JSX
						<form className="store-selector">
							// js-comments werden
							/* angezeigt in JSX */
							{/* curly-braces and then block-comments are comments */}
							<h2>please enter a store {userName}</h2>
							<input type="text" ref="storeId" required />
							<input type="submit" />
						</form>
--
-- °°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°
-- 5 of 29 : CREATING OUR APPLICATION LAYOUT WITH COMPONENTS					  05:02
		wir definieren eine app-komponente. diese enthaelt weitere komponenten
		(return nur marker momentan)
		/*
		  def app-komponente : <App />
		*/
		var App = React.createClass({
		  render : function() {
		    return (
		      <div className="catch-of-the-day">
		        <div className="menu">
		          <Header />
		        </div>
		        <Order />
		        <Inventory />
		      </div>
		    )
		  }
		});

-- °°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°
-- 6 of 29 : PASSING DYNAMIC DATA WITH PROPS                            06:54
		der header-komponente koennen props uebergeben werden, d.h. dort wo die komponente
		verwendet wird => key=value
		in der komponente selber (def der komp.) werden die props mit {this.props.key}
		angesprochen
		hinweis: in der konsole mit $r zugriff auf ReactDom. $r.props => direkt

-- °°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°
-- 7 of 29 : ROUTING WITH REACT ROUTER                                  13:22
		package react-router for routing (done in client)
		npm install react-router --save-dev
		--
		then adding router-stuff to the js
		--
		in browser: http://localhost:3000/?#/?_k=fhom5d (StorePicker)
			then adding manually /store/123/ (according to "/store/:storeId")
			==> http://localhost:3000/?#/store/123/?_k=fhom5d (app is rendered now)
		--
		browser-history add-on helps away with the #...stuff in url (state)...
			http://localhost:3000
			http://localhost:3000/store/mine
		--
		set up 404 (not found)
			define new compo NotFound. add route * using this component

-- °°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°
-- 8 of 29 : USING UTILITY : HELPER FUNCTIONS IN REACT                  04:41
		link function of helpers.js and use them in main.js
		e.g. <input type="text" ref="storeId" value={h.getFunName()} required />

-- °°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°
-- 9 of 29 : ALL ABOUT REACT EVENT LISTENERS                            08:36
		events similar to js but in cross-browser-wrapper
		treated more "inline", e.g. listen on form-submit (hit enter or hit
		button submit of form :
			<form className="store-selector" onSubmit={this.goToStore}>)
			this refers to the component (here StorePicker)
		--
		das mit der routing-transition geht nid. habe noch gemacht:
			npm install history
		dann wieder probiert... dann ists gegangen. offenbar war die history zu alt...
		--

-- °°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°
-- 10 of 29 : UNDERSTANDING STATE                                       21:58
		zentrales object, das alle infos zu den komponenten enthaelt (state-object, analog props-object)
		alle anpassungen werden in diesem state-object gemacht und react updated dann DOM, wir machen keine anpassungen im html
		momentan hat es (f12) unter Router ein State-objekt, aber noch nicht unter App...
		A brief interlude: props vs state
		https://facebook.github.io/react/docs/thinking-in-react.html
		There are two types of "model" data in React: props and state. It's important to
		understand the distinction between the two; skim the official React
		(https://facebook.github.io/react/docs/interactivity-and-dynamic-uis.html)
		docs if you aren't sure what the difference is.
			https://facebook.github.io/react/docs/interactivity-and-dynamic-uis.html#components-are-just-state-machines
			https://facebook.github.io/react/docs/interactivity-and-dynamic-uis.html#how-state-works
			https://facebook.github.io/react/docs/interactivity-and-dynamic-uis.html#what-components-should-have-state
			https://facebook.github.io/react/docs/interactivity-and-dynamic-uis.html#what-should-go-in-state
			https://facebook.github.io/react/docs/interactivity-and-dynamic-uis.html#what-shouldnt-go-in-state
		--
		 feature of JSX called spread attributes: var component = <Component {...props} />;
		 	The properties of the object that you pass in are copied onto the component's props.
			https://facebook.github.io/react/docs/jsx-spread.html

-- °°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°
-- 11 of 29 : LOADING DATA INTO STATE ONCLICK                           03:06
		load content of sample-fishes.js into app by click on button in Inventory

-- °°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°
-- 12 of 29 : DISPLAYING STATE WITH JSX                                 10:46
		jsx does not have any loopin-syntax implemented, just plain old JS
		Object.keys(obj) transforms all entries in the obj-list to an array. thats for
		looping over the array by using map(), d.h. .map(this.renderFish) wendet auf
		jedes array-element von fishes die function renderFish an
		--

-- °°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°
-- 13 of 29 : UPDATING OUR ORDER STATE                                  10:13
		button changes text and behavior depending on isAvailable
		add a fish to the order-state (but is not being displayed in order-gui up to now)

-- °°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°
-- 14 of 29 : DISPLAYING OUR ORDER STATE WITH JSX                       12:54
		fishes + order müssen an komponente order übergeben werden
		order-methods für berechnung total mit reduce, dann wieder aus objects
		ein array machen zum anzeigen via .map(renderOrder)

-- °°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°
-- 15 of 29 : PERSISTING STATE WITH FIREBASE                            14:00
		from google. uses websockets. right editable form firebase dashboard,
		syncs directly with state in react
		sign up with firebase (https://www.firebase.com/login/) but we use re-base
		together with firebase (signed up with my google-account)
			npm install re-base --save-dev
			then define a var with require re-base in app and hook it up with firebase
			(url needed to our firebase cloud-account)
		mit etwa 10 zeilen code hat man also persistenz pro shop separat fuer fishes mit live-updates auch bei mut in db-dashboard
			https://sweltering-fire-6318.firebaseio.com/

-- °°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°
-- 16 of 29 : PERSISTING STATE WITH LOCALSTORAGE                        11:03
		die fische selber, das inventar, wird also unabhängig vom user /sesssion
		in firebase gespeichert.
		aber die bestellung? diese ist ja user-spezifisch und soll hier nicht in firebase
		gespeichert werden sondern in cooky oder in local-storage
		--
		componentWillUpdate reflects new state, e.g. adding order to order-state (stringify it)
		and reset order state if it exists in componentDidMount (un-stringify it)

-- °°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°
-- 17 of 29 : BI-DIRECTIONAL DATA FLOW WITH LINKSTATE                   16:03
		by default react is uni-directional (flow of data). but we want to update (e.g.)
		a fish's name in our Inventory and reflect this in the state, i.d. showing it
		immediately over the whole app. how? two-way binding helpers (link state) in react.
		e.g. link input-field to state, i.e. if input is changed, state-update is triggered.
		works only for top-level entities, i.e. fishes and order. but we need it down deeper...
		i.e. with nested objects. see react-catalyst for this (LinkedStateMixin).
			npm install react-catalyst --save-dev
		--
		<input type="text" valueLink={linkState('fishes.'+key+'.name')} />
		--

-- °°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°
-- 18 of 29 : UPDATING AND DELETING STATE                               10:52
		damit das korrekte fischi deleted werden kann, muss bind(key, scope nicht this
		sondern null) bei button hin:
			<button onClick={this.props.removeFish.bind(null,key)}>Remove Fish</button>
		--
		nice fish-pic:
		https://pixabay.com/static/uploads/photo/2013/07/13/11/32/fish-158336__180.png
		--
		im 2. teil dann den order-eintrag entfernen (zum fischi resp. auch zum geloeschten fischi).
			dazu button als var definieren:
			var removeButton = <button onClick={this.props.removeFromOrder.bind(null,key)}>&times;</button> ;
			...and in remove-method:
			delete this.state.order[key] ;

-- °°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°
-- 19 of 29 : ANIMATING REACT COMPONENTS                                24:53
		animations package in react: is already installed but trying to install
		npm install react-addons-css-transition-group --save-dev
		>>>>>>>>>>>>>>>>>>>>>>> gives this:
		:\sofim_git_repos\react_lernen\catch-of-the-day>npm install react-addons-css-transition-group --save-dev
pm WARN package.json catch-of-the-day@1.0.0 No repository field.
pm WARN peerDependencies The peer dependency react@^0.14.7 included from react-addons-css-transition-group will no
pm WARN peerDependencies longer be automatically installed to fulfill the peerDependency
pm WARN peerDependencies in npm 3+. Your application will need to depend on it explicitly.
pm ERR! Windows_NT 6.1.7601
pm ERR! argv "G:\\server\\nodejs\\node.exe" "G:\\server\\nodejs\\node_modules\\npm\\bin\\npm-cli.js" "install" "react-a
dons-css-transition-group" "--save-dev"
pm ERR! node v4.2.6
pm ERR! npm  v2.14.12
pm ERR! code EPEERINVALID

pm ERR! peerinvalid The package react@0.14.0 does not satisfy its siblings' peerDependencies requirements!

pm ERR! Please include the following file with any support request:
pm ERR!     G:\sofim_git_repos\react_lernen\catch-of-the-day\npm-debug.log

:\sofim_git_repos\react_lernen\catch-of-the-day>
		<<<<<<<<<<<<<<<<<<<<<<<<
	--
	styles in _animations.styl

-- °°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°
-- 20 of 29 : COMPONENT VALIDATION WITH PROPTYPES                       10:03
		propTypes = sort of validation for component, e.g. Header-component: how to
		tell user(=prog) that he forgot to use/set tagline for the component? or
		tell him: why do you set a number, i want a string as tagline!
		example: A basic tabs component, with a few customizable props
		we want to use this component https://github.com/Legitcode/tabs/blob/master/src/tab.jsx
			there is a definition propTypes for what is expected
			==> makes component a bit more resilient!
		--
		https://facebook.github.io/react/docs/reusable-components.html
		example: <Header - component, check tagline is string and is required
		//validation:
		propTypes : {
			tagline : React.PropTypes.string.isRequired
		}

-- °°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°
-- 21 of 29 : CHUNKING OUR CODE INTO ES6 MODULES                        11:49
		recommended to build react-apps with ES6
		http://babeljs.io/ (babel is a js-compiler with support for JSX and flow)
		nimmt es6 code und spickt ihn als es5 code aus, so dass die browser funktionieren
		damit (es6 wird noch nicht bei allen unterstützt)
		--
		idee hier: alle komponenten (selber gemachten) in catch-of-the-day auslagern
		und sie so einbinden wie die anderen externen komponenten.
		siehe bsp mit NotFound - komponente (da diese einfach ist):
			in sep. file in verz. components auslagern dann importieren in main

-- °°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°
-- 22 of 29 : ES6 COMPONENTS EXTENDED                                   15:47
		chunk out more components...
		---
		beachten: components in uvz
				import React from 'react' ;                           //...brauchen alle
				import AddFishForm from '../components/AddFishForm';  //...compo verwendet andere kompo
				import h     from '../helpers' ;                      //...oder eigene methoden
				import CSSTransitionGroup from 'react-addons-css-transition-group' ; //...oder andere react-kompo
		    ...
				code fuer kompo : var Inventory = React.createClass({....
				...
				export default Inventory ;   // export nicht vergessen in kompo-file
				---
				in main.js : import nicht vergessen der kompo, z.b.
				import Inventory from './components/Inventory';
		---
		refactoring main.js also with imports instead of require...
			import {Router , Route} from 'react-router' ; //with es6 : just import modules needed
		---
		siehe ganz oben: node und npm neu installieren, dann prune, dann
			npm install history (hat funktioniert jetzt ohne fehler)
		---
		in kompo StorePicker funktioniert pushState (mixin: History) resp transitionTo (mixin: Navigation) nicht mehr...
			npm install --save react-router  //react-router@2.0.0
		---
		https://github.com/reactjs/react-router/blob/master/upgrade-guides/v2.0.0.md
		--
		in main.js : import { browserHistory } from 'react-router';
								 dann ...
							   <Router history={ browserHistory } >
		in StorePicker.js:
		              import { browserHistory } from 'react-router';
									dann ...
									browserHistory.push('/store/' + storeId);

		resultat: keine depricated meldungen mehr und es funktioniert so...


-- °°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°
-- 23 of 29 : CREATING REACT CLASSES WITH ES6                           03:19
		ES6 has real classes ! but: no mixins, no autobinds !!
			d.h. "this" muss explizit an die komponente gebunden werden
		https://facebook.github.io/react/docs/reusable-components.html#es6-classes
		--
		example: NotFound.js

-- °°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°
-- 24 of 29 : ES6 AND REACT MIXINS                                      02:06
		falls in classes mixins benoetigt werden : brigand /react-mixin project
-- 25 of 29 : AUTOBINDING THIS WITH ES7 DECORATORS                      05:47
		solving problem with keyword "this" (in es-classes wird this in den methoden
		nicht autom. an die komponente gebunden)
		1. loesung : in render (dort ist this nicht null )
								 ==> ...   onSubmit={this.goToStore.bind(this)}
		2. loesung : use autobind decorator
								 github.com/andreypopp/autobind-decorator
								 --
								 npm install autobind-decorator --save-dev
								 --
								 import autobind from 'autobind-decorator';
								 ...
								 //mark methods for autobinding with (=decoration):
								 @autobind
								 //you can also decorate whole class = all methods are bound
								 !!!!!
								 damit das geht, mus im gulpfile.js folgendes eingeschaltet sein:
								 transform:  [babelify.configure({stage : 0 })]
								 // stage 0 schaltet ALLE experiment. features fuer es7 ein,
								 //         nicht nur decorations


 -- °°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°
 -- 26 of 29 : HANDLING REACT PROPTYPES WITH ES6                         01:03
 		after def of class (example Header) put :
		 Header.propTypes = {
		   tagline : React.PropTypes.string.isRequired
		 }

	
